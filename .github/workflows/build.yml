name: "buildx"

on:
  push:
    paths:
      - "src/**"

env:
  repository: ${{ github.repository }}
  run_id: ${{ github.run_id }}
  BOT: ${{ vars.BOT }}
  GIT_REPO: ${{ vars.GIT_REPO }}
  GIT_REPO_PIPLINE: ${{ vars.GIT_REPO_PIPLINE }}
  BASE_IMAGE_REGISTRY: ${{ vars.BASE_IMAGE_REGISTRY }}
  IMAGE_REGISTRY: ${{ vars.IMAGE_REGISTRY }}
  IMAGE_REGISTRY_USERNAME: ${{ vars.IMAGE_REGISTRY_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  IMAGE_ORG: ${{ vars.IMAGE_ORG }}
  INSTALL_PRIVATE_CA: ${{ vars.INSTALL_PRIVATE_CA }}
  DOTNET_NUGET_CONFIG: ${{ vars.DOTNET_NUGET_CONFIG }}
  NPM_REGISTRY: ${{ vars.NPM_REGISTRY }}
  NPM_NPMRC: ${{ vars.NPM_NPMRC }}

jobs:
  changes:
    runs-on: ubuntu-22.04
    outputs:
      vue: ${{ steps.changes.outputs.vue }}
      hostapi: ${{ steps.changes.outputs.hostapi }}
      migrator: ${{ steps.changes.outputs.migrator }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            vue:
              - 'src/vue/**'
            hostapi:
              - 'src/hostapi/**'
            migrator:
              - 'src/migrator/**'

  build-vue:
    needs: changes
    if: ${{ needs.changes.outputs.vue == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # login docker registry
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{env.IMAGE_REGISTRY}}
          username: ${{env.IMAGE_REGISTRY_USERNAME}}
          password: ${{env.IMAGE_REGISTRY_PASSWORD}}
      # build
      - name: build 1
        shell: pwsh
        working-directory: ./build
        run: |
          ./clone-target-repo.ps1
          ./build.ps1 -ImageName "knightboss" -ProjectType "vue" -ProjectName "vue" `
            -DockerfilePath "./src/vue/Dockerfile"

  build-hostapi:
    needs: changes
    if: ${{ needs.changes.outputs.hostapi == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # login docker registry
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{env.IMAGE_REGISTRY}}
          username: ${{env.IMAGE_REGISTRY_USERNAME}}
          password: ${{env.IMAGE_REGISTRY_PASSWORD}}
      # build
      - name: build 1
        shell: pwsh
        working-directory: ./build
        run: |
          ./clone-target-repo.ps1
          ./build.ps1 -ImageName "knightboss" -ProjectType "dotnet" -ProjectName "hostapi" `
            -DockerfilePath "./src/aspnet-core/src/YoyoBoot.Template.Web.Host/Dockerfile"

  build-migrator:
    needs: changes
    if: ${{ needs.changes.outputs.migrator == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # login docker registry
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{env.IMAGE_REGISTRY}}
          username: ${{env.IMAGE_REGISTRY_USERNAME}}
          password: ${{env.IMAGE_REGISTRY_PASSWORD}}
      # build
      - name: build 1
        shell: pwsh
        working-directory: ./build
        run: |
          ./clone-target-repo.ps1
          ./build.ps1 -ImageName "knightboss" -ProjectType "dotnet" -ProjectName "migrator" `
            -DockerfilePath "./src/aspnet-core/src/YoyoBoot.Template.Migrator/Dockerfile"

  build-complete:
    runs-on: ubuntu-22.04
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    needs: [build-hostapi, build-migrator, build-vue]
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # build
      - name: build 1
        shell: pwsh
        working-directory: ./build
        run: |
          ./bot.ps1 -BotUrl $env:BOT -Msg 'Build Complete'

  build-failure:
    runs-on: ubuntu-22.04
    if: ${{ failure() }}
    needs: [build-hostapi, build-migrator, build-vue]
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # build
      - name: build 1
        shell: pwsh
        working-directory: ./build
        run: |
          ./bot.ps1 -BotUrl $env:BOT -Msg 'Build Failure'
